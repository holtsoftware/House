<views:BaseView
	x:Class="Sannel.House.Client.UWP.Views.TemperatureSettingView"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:local="using:Sannel.House.Client.UWP.Views"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:views="using:Sannel.House.Client.UWP.Views"
	xmlns:controls="using:Sannel.House.Client.UWP.Controls"
	VerticalAlignment="Stretch"
	HorizontalAlignment="Stretch"
	mc:Ignorable="d"
	DataContext="{Binding TemperatureSettingViewModel, Source={StaticResource Locator}}">

	<Grid Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
		<Grid.RowDefinitions>
			<RowDefinition Height="Auto" />
			<RowDefinition />
		</Grid.RowDefinitions>
		<Border Grid.Row="0" Height="4">
			<ProgressBar IsIndeterminate="True" Visibility="{Binding IsBackgroundBusy}"/>
		</Border>
		<Border Grid.Row="1" Style="{StaticResource TempHourStart}">
			<Grid>
				<Grid.RowDefinitions>
					<RowDefinition Height="Auto" />
					<RowDefinition />
				</Grid.RowDefinitions>
				<Grid Grid.Row="0">
					<Grid.ColumnDefinitions>
						<ColumnDefinition />
						<ColumnDefinition />
						<ColumnDefinition />
						<ColumnDefinition />
						<ColumnDefinition />
						<ColumnDefinition />
						<ColumnDefinition />
					</Grid.ColumnDefinitions>
					<Grid.RowDefinitions>
						<RowDefinition Height="30" />
						<RowDefinition Height="30" />
						<RowDefinition />
					</Grid.RowDefinitions>
					<Border Style="{StaticResource TempHourStart}">
						<TextBlock Style="{StaticResource CalanderHeader}">1 Sun</TextBlock>
					</Border>
					<Border Grid.Column="1" Style="{StaticResource TempHourStart}">
						<TextBlock Style="{StaticResource CalanderHeader}">2 Mon</TextBlock>
					</Border>
					<Border Grid.Column="2" Style="{StaticResource TempHourStart}">
						<TextBlock Style="{StaticResource CalanderHeader}">3 Tue</TextBlock>
					</Border>
					<Border Grid.Column="3" Style="{StaticResource TempHourStart}">
						<TextBlock Style="{StaticResource CalanderHeader}">4 Wed</TextBlock>
					</Border>
					<Border Grid.Column="4" Style="{StaticResource TempHourStart}">
						<TextBlock Style="{StaticResource CalanderHeader}">5 Thu</TextBlock>
					</Border>
					<Border Grid.Column="5" Style="{StaticResource TempHourStart}">
						<TextBlock Style="{StaticResource CalanderHeader}">6 Fri</TextBlock>
					</Border>
					<Border Grid.Column="6" Style="{StaticResource TempHourStart}">
						<TextBlock Style="{StaticResource CalanderHeader}">7 Sat</TextBlock>
					</Border>

					<Border Grid.Row="1" Style="{StaticResource TempHourStart}">
						<Button DataContext="{Binding SundayDefault}" Style="{StaticResource TemperatureDefault}">
							<StackPanel x:Name="SunDefault" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
								<TextBlock Text="{Binding CoolTemperatureC, Converter={StaticResource TemperatureConverter}}" />
								<TextBlock x:Name="SunDefaultSep" Text="/" />
								<TextBlock Text="{Binding HeatTemperatureC, Converter={StaticResource TemperatureConverter}}" />
							</StackPanel>
							<Button.Flyout>
								<Flyout Closed="Flyout_Closed">
									<controls:TemperaturePicker />
								</Flyout>
							</Button.Flyout>
						</Button>
					</Border>
					<Border Grid.Row="1" Grid.Column="1" Style="{StaticResource TempHourStart}">
						<Button DataContext="{Binding MondayDefault}" Style="{StaticResource TemperatureDefault}">
							<StackPanel x:Name="MonDefault" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
								<TextBlock Text="{Binding CoolTemperatureC, Converter={StaticResource TemperatureConverter}}" />
								<TextBlock x:Name="MonDefaultSep" Text="/" />
								<TextBlock Text="{Binding HeatTemperatureC, Converter={StaticResource TemperatureConverter}}" />
							</StackPanel>
							<Button.Flyout>
								<Flyout Closed="Flyout_Closed">
									<controls:TemperaturePicker />
								</Flyout>
							</Button.Flyout>
						</Button>
					</Border>
					<Border Grid.Row="1" Grid.Column="2" Style="{StaticResource TempHourStart}">
						<Button DataContext="{Binding TuesdayDefault}" Style="{StaticResource TemperatureDefault}">
							<StackPanel x:Name="TueDefault" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
								<TextBlock Text="{Binding CoolTemperatureC, Converter={StaticResource TemperatureConverter}}" />
								<TextBlock x:Name="TueDefaultSep" Text="/" />
								<TextBlock Text="{Binding HeatTemperatureC, Converter={StaticResource TemperatureConverter}}" />
							</StackPanel>
							<Button.Flyout>
								<Flyout Closed="Flyout_Closed">
									<controls:TemperaturePicker />
								</Flyout>
							</Button.Flyout>
						</Button>
					</Border>
					<Border Grid.Row="1" Grid.Column="3" Style="{StaticResource TempHourStart}">
						<Button DataContext="{Binding WednesdayDefault}" Style="{StaticResource TemperatureDefault}">
							<StackPanel x:Name="WedDefault" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
								<TextBlock Text="{Binding CoolTemperatureC, Converter={StaticResource TemperatureConverter}}" />
								<TextBlock x:Name="WedDefaultSep" Text="/" />
								<TextBlock Text="{Binding HeatTemperatureC, Converter={StaticResource TemperatureConverter}}" />
							</StackPanel>
							<Button.Flyout>
								<Flyout Closed="Flyout_Closed">
									<controls:TemperaturePicker />
								</Flyout>
							</Button.Flyout>
						</Button>
					</Border>
					<Border Grid.Row="1" Grid.Column="4" Style="{StaticResource TempHourStart}">
						<Button DataContext="{Binding ThursdayDefault}" Style="{StaticResource TemperatureDefault}">
							<StackPanel x:Name="ThuDefault" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
								<TextBlock Text="{Binding CoolTemperatureC, Converter={StaticResource TemperatureConverter}}" />
								<TextBlock x:Name="ThuDefaultSep" Text="/" />
								<TextBlock Text="{Binding HeatTemperatureC, Converter={StaticResource TemperatureConverter}}" />
							</StackPanel>
							<Button.Flyout>
								<Flyout Closed="Flyout_Closed">
									<controls:TemperaturePicker />
								</Flyout>
							</Button.Flyout>
						</Button>
					</Border>
					<Border Grid.Row="1" Grid.Column="5" Style="{StaticResource TempHourStart}">
						<Button DataContext="{Binding FridayDefault}" Style="{StaticResource TemperatureDefault}">
							<StackPanel x:Name="FriDefault" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
								<TextBlock Text="{Binding CoolTemperatureC, Converter={StaticResource TemperatureConverter}}" />
								<TextBlock x:Name="FriDefaultSep" Text="/" />
								<TextBlock Text="{Binding HeatTemperatureC, Converter={StaticResource TemperatureConverter}}" />
							</StackPanel>
							<Button.Flyout>
								<Flyout Closed="Flyout_Closed">
									<controls:TemperaturePicker />
								</Flyout>
							</Button.Flyout>
						</Button>
					</Border>
					<Border Grid.Row="1" Grid.Column="6" Style="{StaticResource TempHourStart}">
						<Button DataContext="{Binding SaturdayDefault}" Style="{StaticResource TemperatureDefault}">
							<StackPanel x:Name="SatDefault" Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
								<TextBlock Text="{Binding CoolTemperatureC, Converter={StaticResource TemperatureConverter}}" />
								<TextBlock x:Name="SatDefaultSep" Text="/" />
								<TextBlock Text="{Binding HeatTemperatureC, Converter={StaticResource TemperatureConverter}}" />
							</StackPanel>
							<Button.Flyout>
								<Flyout Closed="Flyout_Closed">
									<controls:TemperaturePicker />
								</Flyout>
							</Button.Flyout>
						</Button>
					</Border>
				</Grid>
				<ScrollViewer Grid.Row="1" HorizontalScrollMode="Auto">
					<Grid x:Name="Calander">
						<Grid.ColumnDefinitions>
							<ColumnDefinition />
							<ColumnDefinition />
							<ColumnDefinition />
							<ColumnDefinition />
							<ColumnDefinition />
							<ColumnDefinition />
							<ColumnDefinition />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
							<RowDefinition Height="30" />
						</Grid.RowDefinitions>
					</Grid>
				</ScrollViewer>
			</Grid>
		</Border>
		<controls:TemperatureEditControl x:Name="EditControl" Grid.RowSpan="2"></controls:TemperatureEditControl>
		<VisualStateManager.VisualStateGroups>
			<VisualStateGroup>
				<VisualState>
					<!-- VisualState to be triggered when window width is >=760 effective pixels -->
					<VisualState.StateTriggers>
						<AdaptiveTrigger MinWindowWidth="760" />
					</VisualState.StateTriggers>
					<VisualState.Setters>
						<!-- Widest possible layout moves some elements around to optimize for more available width 
						and keeps SplitView pane always showing inline -->
						<!--Setter Target="Splitter.DisplayMode" Value="Inline" />
						<Setter Target="Splitter.IsPaneOpen" Value="True" /-->
						<Setter Target="SunDefault.Orientation" Value="Horizontal" />
						<Setter Target="SunDefaultSep.Visibility" Value="Visible" />
						<Setter Target="MonDefault.Orientation" Value="Horizontal" />
						<Setter Target="MonDefaultSep.Visibility" Value="Visible" />
						<Setter Target="TueDefault.Orientation" Value="Horizontal" />
						<Setter Target="TueDefaultSep.Visibility" Value="Visible" />
						<Setter Target="WedDefault.Orientation" Value="Horizontal" />
						<Setter Target="WedDefaultSep.Visibility" Value="Visible" />
						<Setter Target="ThuDefault.Orientation" Value="Horizontal" />
						<Setter Target="ThuDefaultSep.Visibility" Value="Visible" />
						<Setter Target="FriDefault.Orientation" Value="Horizontal" />
						<Setter Target="FriDefaultSep.Visibility" Value="Visible" />
						<Setter Target="SatDefault.Orientation" Value="Horizontal" />
						<Setter Target="SatDefaultSep.Visibility" Value="Visible" />
					</VisualState.Setters>
				</VisualState>
				<VisualState>
					<!-- VisualState to be triggered when window width is >=0 and <548 effective pixels -->
					<VisualState.StateTriggers>
						<AdaptiveTrigger MinWindowWidth="0" />
					</VisualState.StateTriggers>
					<VisualState.Setters>
						<!-- For the most narrow windows and phones in portrait orientation, this state collapses the SplitView pane into overlay mode
						and adds dynamic RelativePanel constraints that puts all elements stacked below each other -->
						<!--Setter Target="Splitter.DisplayMode" Value="Overlay" />
						<Setter Target="Splitter.IsPaneOpen" Value="False" /-->
						<Setter Target="SunDefault.Orientation" Value="Vertical" />
						<Setter Target="SunDefaultSep.Visibility" Value="Collapsed" />
						<Setter Target="MonDefault.Orientation" Value="Vertical" />
						<Setter Target="MonDefaultSep.Visibility" Value="Collapsed" />
						<Setter Target="TueDefault.Orientation" Value="Vertical" />
						<Setter Target="TueDefaultSep.Visibility" Value="Collapsed" />
						<Setter Target="WedDefault.Orientation" Value="Vertical" />
						<Setter Target="WedDefaultSep.Visibility" Value="Collapsed" />
						<Setter Target="ThuDefault.Orientation" Value="Vertical" />
						<Setter Target="ThuDefaultSep.Visibility" Value="Collapsed" />
						<Setter Target="FriDefault.Orientation" Value="Vertical" />
						<Setter Target="FriDefaultSep.Visibility" Value="Collapsed" />
						<Setter Target="SatDefault.Orientation" Value="Vertical" />
						<Setter Target="SatDefaultSep.Visibility" Value="Collapsed" />
					</VisualState.Setters>
				</VisualState>
			</VisualStateGroup>
		</VisualStateManager.VisualStateGroups>
	</Grid>
</views:BaseView>
